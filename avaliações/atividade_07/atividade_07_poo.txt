01) O que é POO?
b) Um paradigma de programação

02) Qual a principal vantagem da POO?
a) Código mais fácil de entender e manter

03) O que é uma classe em POO?
b) Uma estrutura de dados que contém propriedades e métodos

04) O que é um objeto em POO?
b) Uma estrutura de dados que contém propriedades e métodos

05) O que é herança em POO?
a) Uma forma de reutilizar código de uma classe existente em uma nova classe

06) O que é polimorfismo em POO? 
b) A capacidade de uma classe de assumir várias formas

07) O que é encapsulamento em POO?
a) A capacidade de esconder a implementação interna de uma classe

08) O que é uma interface em POO?
a) Um conjunto de métodos e propriedades que uma classe deve implementar

09) O que é composição em POO? 
d) Uma forma de criar um objeto composto por outros objetos

10) O que é agregação em POO? 
a) Uma forma de criar um objeto composto por outros objetos

11) Qual é o principal benefício da POO? 
a) Maior modularidade e reutilização de código.

12) O que é uma classe em Dart?
d) Um modelo para criar objetos.

13) Como se define uma classe em Dart?
a) class NomeDaClasse { }

14) O que é um objeto em Dart?
b) Uma instância de uma classe.

15) O que é o construtor de uma classe em Dart? 
a) Um método especial que é executado quando um objeto é criado.

16) O que é a herança em POO?
a) Uma técnica que permite criar novas classes a partir de classes existentes.

17) O que é o polimorfismo em POO?
a) Uma técnica que permite que objetos de diferentes classes sejam tratados de maneira semelhante.

18) Qual é a diferença entre uma classe abstrata e uma classe concreta em Dart? 
a) Uma classe abstrata não pode ser instanciada diretamente, enquanto uma classe concreta pode ser.

19) O que é uma interface em Dart?
a) Um tipo especial de classe que define um conjunto de métodos que uma classe deve implementar.

20) O que é um relacionamento de associação em um diagrama de classes em POO?
b) É quando uma classe usa a funcionalidade de outra classe sem herdar seus atributos e métodos.